<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<!--
    Google Java Style : https://google.github.io/styleguide/javaguide.html.

    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.sf.net (or in your downloaded distribution).
 -->

<module name = "Checker">
  <property name="charset" value="UTF-8"/>
  <property name="fileExtensions" value="java"/>
  <property name="severity" value="error"/>

  <!-- Checks for whitespace                               -->
  <!-- See http://checkstyle.sf.net/config_whitespace.html -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true"/>
  </module>
  <module name="FileLength">
    <property name="severity" value="warning"/>
    <property name="max" value="1000"/>
  </module>

  <module name="TreeWalker">
    <!-- Disable checkstyle module -->
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
      <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
      <property name="checkFormat" value="$1"/>
    </module>
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE.OFF.ALL"/>
      <property name="onCommentFormat" value="CHECKSTYLE.ON.ALL"/>
    </module>

    <module name="Regexp">
      <property name="format" value="[ \t]+$"/>
      <property name="illegalPattern" value="true"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Trailing whitespace"/>
    </module>
    <module name="Regexp">
      <property name="format" value="(/\*\*\n)*( \*.*\n)*( \* Created by.*)(\n\s\*.*)*/\n[\w|\s]*( class | interface )"/>
      <property name="illegalPattern" value="true"/>
      <property name="message" value="Useless header comment"/>
    </module>
    <module name="Regexp">
      <property name="format" value="\}\n{2,}\}"/>
      <property name="illegalPattern" value="true"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Useless empty line ( } -> } )"/>
    </module>
    <module name="Regexp">
      <property name="format" value="\;\n{2,}\}"/>
      <property name="illegalPattern" value="true"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Useless empty line ( ; -> } )"/>
    </module>
    <module name="Regexp">
      <property name="format" value="(\;|[ \t]+\})\n(\n{2,})?[ \t]+return .*;\n[ \t]+}"/>
      <property name="illegalPattern" value="true"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Empty line separator required before return statement"/>
    </module>

    <module name="AvoidNestedBlocks"/>
    <module name="CyclomaticComplexity">
      <property name="severity" value="warning"/>
      <property name="max" value="10"/>
    </module>
    <module name="CyclomaticComplexity">
      <property name="max" value="20"/>
    </module>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>
    <module name="OuterTypeFilename"/>
    <module name="ReturnCount">
      <property name="max" value="2"/>
    </module>
    <module name="MultipleStringLiterals">
      <property name="ignoreStringsRegexp" value='^(".{0,3}")$'/>
    </module>
    <module name="DefaultComesLast"/>
    <module name="StringLiteralEquality"/>
    <!--<module name="TodoComment">-->
    <!--<property name="format" value="(TODO)|(FIXME)"/>-->
    <!--<property name="severity" value="warning"/>-->
    <!--</module>-->
    <module name="IllegalTokenText">
      <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
      <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
      <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
    </module>
    <module name="SingleSpaceSeparator"/>
    <module name="AvoidEscapedUnicodeCharacters">
      <property name="allowEscapesForControlCharacters" value="true"/>
      <property name="allowByTailComment" value="true"/>
      <property name="allowNonPrintableEscapes" value="true"/>
    </module>
    <module name="LineLength">
      <property name="max" value="200"/>
      <property name="ignorePattern" value="&quot;.*&quot;|^package.*|^import.*|a href|href|http://|https://|ftp://|^/\*|^//"/>
    </module>
    <module name="FinalClass"/>
    <module name="OneTopLevelClass"/>
    <module name="NoLineWrap"/>
    <module name="EmptyBlock">
      <property name="option" value="TEXT"/>
      <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
    </module>
    <module name="NeedBraces"/>
    <module name="LeftCurly"/>
    <module name="RightCurly">
      <property name="id" value="RightCurlySame"/>
      <property name="option" value="same"/>
      <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlyAlone"/>
      <property name="option" value="alone"/>
      <property name="tokens" value="CLASS_DEF, METHOD_DEF, LITERAL_FOR, LITERAL_WHILE"/>
    </module>
    <module name="OneStatementPerLine"/>
    <module name="MultipleVariableDeclarations"/>
    <module name="ArrayTypeStyle"/>
    <module name="MissingSwitchDefault"/>
    <module name="FallThrough"/>
    <module name="UpperEll"/>
    <module name="ModifierOrder"/>
    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true"/>
      <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
    </module>
    <module name="NestedTryDepth">
      <property name="max" value="1"/>
    </module>
    <module name="EqualsAvoidNull"/>
    <module name="SeparatorWrap">
      <property name="id" value="SeparatorWrapDot"/>
      <property name="tokens" value="DOT"/>
      <property name="option" value="nl"/>
    </module>
    <module name="SeparatorWrap">
      <property name="id" value="SeparatorWrapComma"/>
      <property name="tokens" value="COMMA"/>
      <property name="option" value="EOL"/>
    </module>
    <module name="SeparatorWrap">
      <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
      <property name="id" value="SeparatorWrapEllipsis"/>
      <property name="tokens" value="ELLIPSIS"/>
      <property name="option" value="EOL"/>
    </module>
    <module name="SeparatorWrap">
      <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
      <property name="id" value="SeparatorWrapArrayDeclarator"/>
      <property name="tokens" value="ARRAY_DECLARATOR"/>
      <property name="option" value="EOL"/>
    </module>
    <module name="SeparatorWrap">
      <property name="id" value="SeparatorWrapMethodRef"/>
      <property name="tokens" value="METHOD_REF"/>
      <property name="option" value="nl"/>
    </module>
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
      <message key="name.invalidPattern"
               value="Package name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="TypeName">
      <message key="name.invalidPattern"
               value="Type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="MemberName">
      <message key="name.invalidPattern"
               value="Member name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="ConstantName">
      <property name="format"
                value="^log(ger)?|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
      <message key="name.invalidPattern"
               value="Constant name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="ParameterName">
      <property name="format" value="^[a-z][a-zA-Z0-9]+?$"/>
      <message key="name.invalidPattern"
               value="Parameter name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="CatchParameterName">
      <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
      <message key="name.invalidPattern"
               value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="LocalVariableName">
      <property name="tokens" value="VARIABLE_DEF"/>
      <property name="format" value="^([a-z][a-zA-Z0-9]+|i|j)$"/>
      <message key="name.invalidPattern"
               value="Local variable name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="ClassTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern"
               value="Class type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern"
               value="Method type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="InterfaceTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern"
               value="Interface type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="NoFinalizer"/>
    <module name="GenericWhitespace">
      <message key="ws.followed"
               value="GenericWhitespace ''{0}'' is followed by whitespace."/>
      <message key="ws.preceded"
               value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
      <message key="ws.illegalFollow"
               value="GenericWhitespace ''{0}'' should followed by whitespace."/>
      <message key="ws.notPreceded"
               value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
    </module>
    <!--<module name="Indentation"/>-->
    <module name="OverloadMethodsDeclarationOrder"/>
    <!--<module name="CustomImportOrder">-->
    <!--<property name="severity" value="warning"/>-->
    <!--<property name="separateLineBetweenGroups" value="false"/>-->
    <!--<property name="customImportOrderRules" value="THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###STATIC"/>-->
    <!--</module>-->
    <module name="RedundantImport"/>
    <module name="RedundantModifier"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="MethodParamPad"/>
    <module name="ParenPad"/>
    <module name="OperatorWrap">
      <property name="option" value="NL"/>
      <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
    </module>
    <module name="AnnotationLocation">
      <property name="id" value="AnnotationLocationMostCases"/>
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
    </module>
    <module name="AnnotationLocation">
      <property name="id" value="AnnotationLocationVariables"/>
      <property name="tokens" value="VARIABLE_DEF"/>
      <property name="allowSamelineMultipleAnnotations" value="true"/>
    </module>
    <module name="UnusedImports"/>
    <module name="EmptyStatement"/>
    <module name="ModifiedControlVariable"/>
    <!--<module name="NonEmptyAtclauseDescription">-->
    <!--<property name="severity" value="warning"/>-->
    <!--</module>-->
    <!--<module name="JavadocTagContinuationIndentation"/>-->
    <!--<module name="SummaryJavadoc">-->
    <!--<property name="severity" value="warning"/>-->
    <!--<property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>-->
    <!--</module>-->
    <!--<module name="JavadocParagraph">-->
    <!--<property name="severity" value="warning"/>-->
    <!--</module>-->
    <module name="AtclauseOrder">
      <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
      <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
    </module>
    <!--<module name="JavadocMethod">-->
    <!--<property name="severity" value="warning"/>-->
    <!--<property name="scope" value="public"/>-->
    <!--<property name="allowMissingParamTags" value="true"/>-->
    <!--<property name="allowMissingThrowsTags" value="true"/>-->
    <!--<property name="allowMissingReturnTag" value="true"/>-->
    <!--<property name="minLineCount" value="2"/>-->
    <!--<property name="allowedAnnotations" value="Override, Test"/>-->
    <!--<property name="allowThrowsTagsForSubclasses" value="true"/>-->
    <!--</module>-->
    <module name="MethodName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
      <message key="name.invalidPattern"
               value="Method name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!--<module name="SingleLineJavadoc">-->
    <!--<property name="ignoreInlineTags" value="false"/>-->
    <!--</module>-->
    <module name="EmptyCatchBlock">
      <property name="exceptionVariableName" value="expected"/>
    </module>
  </module>
</module>